// Marco Polo 360 - Database Schema
// Comprehensive schema based on Figma analysis

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & Users
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core User Model
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  name                String?
  lastName            String?
  phone               String?
  phoneVerified       Boolean   @default(false)
  image               String?
  
  // Verification fields
  passportNumber      String?
  governmentId        String?
  verificationStatus  VerificationStatus @default(PENDING)
  verificationDocs    String[] // URLs to uploaded documents
  
  // User preferences
  languagePreference  Language  @default(ENGLISH)
  currency           String    @default("USD")
  
  // Ratings and stats
  rating             Float?
  totalTrips         Int       @default(0)
  completedTrips     Int       @default(0)
  cancelledTrips     Int       @default(0)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  accounts           Account[]
  sessions           Session[]
  travellerPosts     TravellerPost[]
  senderPosts        SenderPost[]
  sentMessages       Message[] @relation("MessageSender")
  conversations      ConversationParticipant[]
  sentRequests       Request[] @relation("RequestSender")
  receivedRequests   Request[] @relation("RequestReceiver")
  givenReviews       Review[]  @relation("ReviewGiver")
  receivedReviews    Review[]  @relation("ReviewReceiver")
  transactions       Transaction[]

  @@index([email])
  @@index([verificationStatus])
}

// Traveller Posts (Carriers offering space)
model TravellerPost {
  id                String    @id @default(cuid())
  userId            String
  
  // Flight Information
  departureCountry  String
  departureCity     String?
  departureAirport  String?
  departureDate     DateTime
  departureTime     String?
  
  arrivalCountry    String
  arrivalCity       String?
  arrivalAirport    String?
  arrivalDate       DateTime
  arrivalTime       String?
  
  // Luggage Information
  availableWeight   Float     // in KG
  pricePerKg        Float     // price per KG
  specialNotes      String?
  
  // Delivery preferences
  pickupLocation    String?
  deliveryLocation  String?
  
  status            PostStatus @default(ACTIVE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests          Request[]
  
  @@index([departureCountry, arrivalCountry])
  @@index([departureDate])
  @@index([status])
}

// Sender Posts (People wanting to send items)
model SenderPost {
  id                String    @id @default(cuid())
  userId            String
  
  // Origin Information
  originCountry     String
  originCity        String
  originAddress     String?
  
  // Destination Information
  destinationCountry String
  destinationCity    String
  destinationAddress String?
  
  // Item Information
  itemCategory      String
  itemDescription   String
  weight            Float     // in KG
  photos            String[]  // URLs to uploaded photos
  specialNotes      String?
  
  // Delivery Information
  pickupNotes       String?
  deliveryNotes     String?
  maxPrice          Float?    // maximum willing to pay
  
  status            PostStatus @default(ACTIVE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests          Request[]
  
  @@index([originCountry, destinationCountry])
  @@index([itemCategory])
  @@index([status])
}

// Request system (connecting senders with travellers)
model Request {
  id              String        @id @default(cuid())
  senderPostId    String
  travellerPostId String
  senderId        String
  receiverId      String        // traveller who receives the request
  
  message         String?       // custom message with request
  proposedPrice   Float?        // price proposed by sender
  agreedPrice     Float?        // final agreed price
  
  status          RequestStatus @default(PENDING)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  senderPost      SenderPost    @relation(fields: [senderPostId], references: [id], onDelete: Cascade)
  travellerPost   TravellerPost @relation(fields: [travellerPostId], references: [id], onDelete: Cascade)
  sender          User          @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User          @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation    Conversation?
  transaction     Transaction?
  
  @@index([status])
  @@index([senderId])
  @@index([receiverId])
}

// Messaging System
model Conversation {
  id        String   @id @default(cuid())
  requestId String   @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  request      Request                   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  
  createdAt      DateTime    @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([createdAt])
}

// Transaction Management
model Transaction {
  id              String            @id @default(cuid())
  requestId       String            @unique
  userId          String            // payer
  amount          Float
  currency        String            @default("USD")
  
  stripePaymentId String?
  status          TransactionStatus @default(PENDING)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([userId])
}

// Review System
model Review {
  id         String @id @default(cuid())
  giverId    String
  receiverId String
  requestId  String // which transaction this review is for
  
  rating     Int    // 1-5 stars
  comment    String?
  
  createdAt  DateTime @default(now())

  // Relations
  giver    User @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver User @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([giverId, receiverId, requestId])
  @@index([receiverId])
}

// Enums
enum VerificationStatus {
  PENDING
  PARTIAL
  VERIFIED
  REJECTED
}

enum Language {
  ENGLISH
  FRENCH
  PERSIAN
}

enum PostStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum MessageType {
  TEXT
  SYSTEM
  STATUS_UPDATE
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
